import pandas as pd
import seaborn as sns
from sklearn import preprocessing
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import numpy as np
sns.set(style="white", color_codes=True)
import warnings
warnings.filterwarnings("ignore")

if __name__ == '__main__':

    dataset = pd.read_csv(r'CC.csv')
    nulls = pd.DataFrame(dataset.isnull().sum().sort_values(ascending=False))
    dataset = dataset.select_dtypes(include=[np.number]).interpolate().dropna()
    ##dataset.apply(lambda x: x.fillna(x.mean()), axis=0)
    x = dataset.iloc[:, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]]
    ##y = dataset.iloc[:, -1]

    ##Bonus points: visualize the clustering
    ##Plotted the silhouette scores for questions 1-3

    ##elbow plot to find number of clusters
    wcss = []
    for i in range(1,11):
        kmeans = KMeans(n_clusters=i, max_iter=300, random_state=0)
        kmeans.fit(x)
        wcss.append(kmeans.inertia_)

    plt.plot(range(1,11), wcss)
    plt.title('the elbow method')
    plt.xlabel('Number of Clusters')
    plt.ylabel('WCSS')
    plt.show()

    ##building the model
    ##elbow method showed n=3 for num clusters
    nclusters = 3 # this is the k in kmeans
    km = KMeans(n_clusters=nclusters)
    km.fit(x)

    # predict the cluster for each data point
    y_cluster_kmeans = km.predict(x)
    from sklearn import metrics
    score = metrics.silhouette_score(x, y_cluster_kmeans)
    print "silhouette_score 1 = ", score
    score_samp = metrics.silhouette_samples(x, y_cluster_kmeans)
    sns.distplot(score_samp)
    plt.show()
    ##Tried visualizing clustering, found no linear separability betweeen these features
    ##sns.FacetGrid(dataset,hue="CREDIT_LIMIT", size=4).map(plt.scatter,"PURCHASES_FREQUENCY", "CASH_ADVANCE_FREQUENCY").add_legend()

    ##Question 2, feature scaling
    from sklearn.preprocessing import StandardScaler
    scaler = preprocessing.StandardScaler()
    scaler.fit(x)
    x_scaled_array = scaler.transform(x)
    x_scaled = pd.DataFrame(x_scaled_array,columns=x.columns)
    km.fit(x_scaled)
    y_cluster_kmeans_scal = km.predict(x_scaled)
    score2 = metrics.silhouette_score(x_scaled, y_cluster_kmeans_scal)
    print "Silhouette score 2 = ", score2
    score_samp_scal = metrics.silhouette_samples(x_scaled, y_cluster_kmeans_scal)
    sns.distplot(score_samp_scal)
    plt.show()

    ##Question 3 -- PCA
    from sklearn.decomposition import PCA
    pca = PCA(2)
    x_pca = pca.fit_transform(x_scaled)
    km.fit(x_pca)
    y_cluster_kmeans_pca = km.predict(x_pca)
    score3 = metrics.silhouette_score(x_pca, y_cluster_kmeans_pca)
    print "Silhouette score 3 = ", score3
    score_samp_pca = metrics.silhouette_samples(x_pca, y_cluster_kmeans_pca)
    sns.distplot(score_samp_pca)
    plt.show()



