import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

if __name__ == '__main__':
    plt.style.use(style='ggplot')
    plt.rcParams['figure.figsize'] = (10, 6)
    train = pd.read_csv(r'C:\Users\annaj\Documents\rr.csv')

    ###question 2
    nulls = pd.DataFrame(train.isnull().sum().sort_values(ascending=False))
    data = train.select_dtypes(include=[np.number]).interpolate().dropna()
    y = np.log(train.revenue)
    x = data.drop(['revenue'], axis=1)
    from sklearn.model_selection import train_test_split
    X_train, X_test, y_train, y_test = train_test_split(x, y, random_state=42, test_size=.33)
    from sklearn import linear_model
    lrl = linear_model.LinearRegression()
    model = lrl.fit(X_train, y_train)
    print("R2 is:", model.score(X_test, y_test))
    prediction = model.predict(X_test)
    from sklearn.metrics import mean_squared_error
    print("RMSE is:", mean_squared_error(y_test, prediction))

    ###question 3
    numeric_features = train.select_dtypes(include=[np.number])
    corr = numeric_features.corr()
    print(corr['revenue'].sort_values(ascending=False)[:6], '\n')
    y = np.log(train.revenue)
    ###use top 5 correlated as features and don't use the rest of the columns
    x = data[['P2', 'P28', 'P6', 'P21', 'P11']]
    from sklearn.model_selection import train_test_split

    X_train, X_test, y_train, y_test = train_test_split(x, y, random_state=42, test_size=.33)
    from sklearn import linear_model

    lrl = linear_model.LinearRegression()
    model = lrl.fit(X_train, y_train)
    print("R2 is:", model.score(X_test, y_test))
    prediction = model.predict(X_test)
    from sklearn.metrics import mean_squared_error

    print("RMSE is:", mean_squared_error(y_test, prediction))
